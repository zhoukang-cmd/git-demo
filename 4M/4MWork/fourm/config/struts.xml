<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
        "http://struts.apache.org/dtds/struts-2.0.dtd">
<struts>
  <!--
    add by zhangjuncai 2022-03-24
    < form id="form1" name="form1" method="post" action="${ctx}/user/user_login.html" >
    这种方式处理以后，所有后缀名字html的请求都不是静态页面，都要有struts2进行处理
     -->
	<constant name="struts.action.extension" value="html" />
	
	<!-- 让struts2支持动态方法调用 -->
    <constant name="struts.enable.DynamicMethodInvocation" value="true" />
    
    <!-- 指定 Struts2默认的 ObjectFactory Bean，该属性默认值是 spring -->
   <!--
    <constant name="struts.objectFactory" value="spring" />
    -->
    
    <!-- include节点是struts2中组件化的方式 可以将每个功能模块独立到一个xml配置文件中 然后用include节点引用
    里面定义了各种各样的Action -->
    <include file="struts-default.xml" />
    <include file="struts/user.xml" />
    <include file="struts/common.xml" />
    <include file="struts/analyse.xml" />
    <include file="struts/display.xml" />
    <include file="struts/camera.xml" />
    <include file="struts/history.xml" />
    <include file="struts/compare.xml" />
    <include file="struts/fault.xml" />
    <include file="struts/repair.xml" />
    <include file="struts/suggest.xml" />
    <include file="struts/equip.xml" />
    
    <!-- 文件上传允许的最大值 -->
	<constant name="struts.multipart.maxSize" value="10000000" />
	
	<!-- 每次HTTP请求系统都重新加载资源文件，有助于开发 -->
    <constant name="struts.i18n.reload" value="true" />
	
	
	<!-- package提供了将多个Action组织为一个模块的方式，package的名字必须是唯一的， package可以扩展，当一个package扩展自
        另一个package时该package会在本身配置的基础上加入扩展的package
        的配置 父package必须在子package前配置 
        name：package名称
        extends:继承的父package名称
        abstract:设置package的属性为抽象的 抽象的package不能定义action 值true:false
        namespace:定义package命名空间，该命名空间影响到url的地址，例如此命名空间为/test，
        那么访问是的地址为http://localhost:8080/struts2/test/XX.action
     -->
   <package name="fourm-default" extends="struts-default"  namespace="/">
   
	    <!-- 拦截器，每收到一个请求，都要从session里面获取account信息，用于判断是否是合法登录用户 -->
	    <!-- 定义拦截器 
                name:拦截器名称
                class:拦截器类路径
             -->
	    <interceptors>
			<interceptor name="myInterceptor" class="com.fourm.interceptor.LoginInterceptor" />	
			<!-- 定义拦截器栈 -->
            <interceptor-stack name="loginInterceptor">
            	<interceptor-ref name="defaultStack" />
			    <interceptor-ref name="myInterceptor"/>    			    
            </interceptor-stack>
		 </interceptors>
		 
		 <!-- 定义默认的拦截器，每个Action都会自动引用，如果Action中引用了其它的拦截器 默认的拦截器将无效 -->
		 <default-interceptor-ref name="loginInterceptor" />
		 
		 
		 <!-- 全局result  -->
		 <!-- 节点配置
                name : result名称 和Action中返回的值相同
                type : result类型 不写则选用superpackage的type struts-default.xml中的默认为dispatcher
             -->
		<global-results>
			<result name="loginPage">/index.jsp</result>
			<result name="json">/front/common/json.jsp</result>
			<result name="goDisplay">/front/error.jsp</result> 
		</global-results>
		
		 <!-- 系统抛出 异常以后，跳转到的页面  -->
		 <global-exception-mappings>
		   <exception-mapping result="goDisplay" exception="java.lang.Exception">
		   </exception-mapping>
		 </global-exception-mappings>
				
	</package>
</struts>
